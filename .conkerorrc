// -*- mode: javascript -*-

// Use xkcd-mode
require("xkcd.js");

// let xkcd-mode put the funny alt text into the page.
xkcd_add_title = true;

// Use reddit-mode
require("reddit.js");

// Use youtube-mode and youtube player
require("youtube.js");
require("youtube-player.js");

// use noscript
require("noscript.js");

// emacs-style mode line
require("mode-line.js");

// give me new tabs; open buffers (tabs) in the background
require("new-tabs.js");
require("clicks-in-new-buffer.js");
clicks_in_new_buffer_target = OPEN_NEW_BUFFER_BACKGROUND;
clicks_in_new_buffer_button = 1; //  midclick links in new buffers with

// load download buffers in the background in the current
// window, instead of in new windows.
download_buffer_automatic_open_target = OPEN_NEW_BUFFER_BACKGROUND;

// load urls from the command line in new buffers instead
// of new windows.
url_remoting_fn = load_url_in_new_buffer;

// default directory for downloads and shell commands.
cwd = get_home_directory();
cwd.append("downloads");

// Use adblock plus
require("adblockplus.js");

// some bookmarks
define_webjump("efu",      "http://emacs-fu.blogspot.com");
define_webjump("lkml",     "https://lkml.org");
define_webjump("ew",       "https://emacswiki.org");
define_webjump("yts",      "https://www.youtube.com/results?search_query=%s&aq=f");
define_webjump("aur",      "https://aur.archlinux.org/packages/?K=%s");
define_webjump("arch",     "https://www.archlinux.org/packages/?q=%s");
define_webjump("archwiki", "https://wiki.archlinux.org/index.php?search=%s");

// use emacsclient as external editor
editor_shell_command = "emacsclient -c";

// view source in emacs
view_source_use_external_editor = true;

// use mplayer to watch videos
external_content_handlers.set("video/*", "mplayer");

// https everywhere options dialog
if ('@eff.org/https-everywhere;1' in Cc) {
    interactive("https-everywhere-options-dialog",
                "Open the HTTPS Everywhere options dialog.",
                function (I) {
                    window_watcher.openWindow(
                        null, "chrome://https-everywhere/content/preferences.xul",
                        "", "chrome,titlebar,toolbar,centerscreen,resizable", null);
                });
}

// call ghostery
interactive("ghostery",
            "Open Ghostery settings.",
            function (I) {
                browser_object_follow(I.buffer,
																			OPEN_NEW_BUFFER,
																			'chrome://ghostery/content/options.html');
            });

// copy url with C-c u
interactive("copy-url",
						"Copy the current buffer's URL to the clipboard",
						function(I) {
								var text = I.window.buffers.current.document.location.href;
								writeToClipboard(text);
								I.window.minibuffer.message("copied: " + text);
						}
					 );
define_key(default_global_keymap, "C-c u", "copy-url");

// reload conkerorrc with C-c r
interactive("reload-config", "reload conkerorrc",
						function(I) {
								load_rc();
								I.window.minibuffer.message("config reloaded");
						}
					 );
define_key(default_global_keymap, "C-c r", "reload-config");
